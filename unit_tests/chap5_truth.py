"""
Expected values for trim.py and compute_model.py in chap5
"""

import numpy as np 

# truth compute_trim
trimState = np.array(  [[-5.95888304e-15],
                        [ 0.00000000e+00],
                        [-1.00000000e+02],
                        [ 2.49687427e+01],
                        [ 0.00000000e+00],
                        [ 1.24975516e+00],
                        [ 9.99687380e-01],
                        [ 0.00000000e+00],
                        [ 2.50028494e-02],
                        [ 0.00000000e+00],
                        [ 0.00000000e+00],
                        [ 0.00000000e+00],
                        [ 0.00000000e+00]])
trimInputE = -0.1247780701597401
trimInputA = 0.0018361809638628682
trimInputR = -0.000302608037876341
trimInputT = 0.6767522859047431

# truth f_euler
fEuler = np.array( [[ 2.50000000e+01],
                    [ 0.00000000e+00],
                    [ 3.51005449e-06],
                    [-7.62389501e-06],
                    [ 1.58957070e-03],
                    [-2.87422256e-07],
                    [ 0.00000000e+00],
                    [ 0.00000000e+00],
                    [ 0.00000000e+00],
                    [-2.84113146e-05],
                    [ 3.69956321e-07],
                    [ 2.42755684e-04]])

# truth for df_dx
A = np.array(  [[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    9.98749715e-01,  0.00000000e+00,  4.99900660e-02,
                    -3.12376685e-05, -1.24964854e-02, -1.24999990e-02,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    0.00000000e+00,  1.00000000e+00,  0.00000000e+00,
                    -1.24975495e+00,  0.00000000e+00,  2.49999958e+01,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    -4.99900660e-02,  0.00000000e+00,  9.98749715e-01,
                    -6.24096253e-04, -2.49999958e+01, -2.22044605e-13,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
                [ 1.25580298e-06,  1.25580298e-06,  1.25580298e-06,
                    -1.81313260e-01, -2.54253525e-02, -9.07754961e-03,
                    5.08105578e-01, -9.78749937e+00,  1.25580290e-06,
                    1.25580298e-06, -1.21983772e+00,  1.25580298e-06],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    1.27009205e-04,  2.54331343e-09, -7.76769248e-01,
                    9.78774558e+00,  0.00000000e+00,  0.00000000e+00,
                    1.24975516e+00,  0.00000000e+00, -2.49687427e+01],
                [-1.09390431e-05, -1.09390431e-05, -1.09390431e-05,
                    -7.82067397e-01,  2.21431158e-01, -3.91699209e-02,
                    -4.42954486e+00, -4.94807378e-01, -1.09390431e-05,
                    -1.09390431e-05,  2.43710390e+01, -1.09390431e-05],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    1.43259144e-01,  2.86870095e-06, -3.85958952e+00,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    -2.26288507e+01,  0.00000000e+00,  1.09050408e+01],
                [-9.87160320e-06, -9.87160320e-06, -9.87160320e-06,
                    -9.84283186e-06,  1.99837834e-01, -9.87016257e-06,
                    -3.99290021e+00, -9.87160320e-06, -9.87160320e-06,
                    -1.15950898e-04, -5.29474817e+00,  9.62076920e-05],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    9.82535121e-03,  1.96748311e-07,  7.83570126e-01,
                    0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                    -1.15091677e-01,  0.00000000e+00, -1.22765474e+00]])

# truth for df_du
B = np.array(  [[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00],
                [ 8.14416199e+00, -1.38398881e-01,  1.25580298e-06, 1.25580298e-06],
                [ 0.00000000e+00,  0.00000000e+00,  1.48617187e+00, 3.76496875e+00],
                [-1.09390431e-05, -2.58619432e+00, -1.09390431e-05, -1.09390431e-05],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00],
                [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00],
                [-5.29036960e+00,  0.00000000e+00,  1.30883678e+02, -1.79637437e+00],
                [-9.87160320e-06, -3.61123994e+01, -9.87160320e-06, -9.87160320e-06],
                [-3.62115122e-01,  0.00000000e+00,  5.01173501e+00, -2.48813413e+01]])

# truth for compute_model_SS
A_lat = np.array(  [[ 2.54331300e-09,  1.24975516e+00, -2.49687427e+01,
                        9.78774558e+00,  0.00000000e+00],
                    [ 2.86868963e-06, -2.26288507e+01,  1.09050408e+01,
                        0.00000000e+00,  0.00000000e+00],
                    [ 1.96747536e-07, -1.15091677e-01, -1.22765474e+00,
                        0.00000000e+00,  0.00000000e+00],
                    [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                        0.00000000e+00,  0.00000000e+00],
                    [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                        0.00000000e+00,  0.00000000e+00]])
A_lon = np.array(  [[-1.81314515e-01, -9.07880540e-03, -1.21983897e+00,
                        -9.78750062e+00,  0.00000000e+00],
                    [-7.82056457e-01, -3.91589817e-02,  2.43710499e+01,
                        -4.94796439e-01,  0.00000000e+00],
                    [ 2.95600933e-08,  1.48012735e-09, -5.29473830e+00,
                        0.00000000e+00,  0.00000000e+00],
                    [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                        0.00000000e+00,  0.00000000e+00],
                    [ 4.99900661e-02, -9.98749715e-01,  0.00000000e+00,
                        2.49999958e+01,  0.00000000e+00]])
B_lat = np.array(  [[  1.48617188,   3.76496875],
                    [130.8836782 ,  -1.79637437],
                    [  5.01173501, -24.88134133],
                    [  0.        ,   0.        ],
                    [  0.        ,   0.        ]])
B_lon = np.array(  [[ -0.13840014,   8.14416074],
                    [ -2.58618339,   0.        ],
                    [-36.11238957,   0.        ],
                    [  0.        ,   0.        ],
                    [  0.        ,   0.        ]])


# truth compute_model_tf
Va_trim = np.array([25.])
alpha_trim = np.array([0.05001105])
theta_trim = 0.050010910443078566
a_phi1 = np.array([22.62885069])
a_phi2 = np.array([130.8836782])
a_theta1 = np.array([5.2947383])
a_theta2 = np.array([99.94742163])
a_theta3 = np.array([-36.11238957])
a_V1 = np.array([0.28168284])
a_V2 = np.array([8.14416074])
a_V3 = np.array([9.8])
